.container {
    display: block;
    position: relative;
    // padding-left: 35px;
    margin-bottom: 12px;
    cursor: pointer;
    font-size: 14px;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.rotated-image-0 {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
}

.rotated-image-90 {
    -webkit-transform: rotate(90deg);
    transform: rotate(90deg);
}

.rotated-image-180 {
    -webkit-transform: rotate(180deg);
    transform: rotate(180deg);
}

.rotated-image-270 {
    -webkit-transform: rotate(270deg);
    transform: rotate(270deg);
}

.rotated-image-360 {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
}


/* Hide the browser's default checkbox */

.container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
}


/* Create a custom checkbox */

.checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 20px;
    width: 20px;
    background-color: #eee;
}


/* On mouse-over, add a grey background color */

.container:hover input~.checkmark {
    background-color: #ccc;
}


/* When the checkbox is checked, add a blue background */

.container input:checked~.checkmark {
    background-color: #2196F3;
}


/* Create the checkmark/indicator (hidden when not checked) */

.checkmark:after {
    content: "";
    position: absolute;
    display: none;
}


/* Show the checkmark when checked */

.container input:checked~.checkmark:after {
    display: block;
}


/* Style the checkmark/indicator */

.container .checkmark:after {
    left: 9px;
    top: 5px;
    width: 5px;
    height: 10px;
    border: solid white;
    border-width: 0 3px 3px 0;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
}

.table-bordered {
    border: 1pt solid black;
}

table {
    font-size: 15px !important;
}

.table>tr>th {
    background: lightgray;
}

.card {
    width: auto !important;
}

#style-2::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    background-color: #F5F5F5;
}

#style-2::-webkit-scrollbar {
    width: 12px;
    background-color: #F5F5F5;
}

#style-2::-webkit-scrollbar-thumb {
    border-radius: 10px;
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);
    background-color: #D62929;
}

.example-radio-group {
    display: flex;
    flex-direction: column;
    margin: 15px 0;
}

.example-radio-button {
    margin: 5px;
}

.mat-radio-button.mat-accent.mat-radio-checked .mat-radio-outer-circle {
    border-color: #1b6be3 !important;
}

.width-100 {
    width: 100% !important;
}

.sm-table td,
.sm-table th {
    padding: 0% !important
}

.checkmark {
    margin: 3px 3px !important;
}

// .container {
//     margin-bottom: 8px !important;
// }
div.card-header {
    padding: 1px !important;
}

mat-slider {
    width: 300px;
}

div.panel-heading,
div.card-header {
    padding: 1px !important
}

// slider with ticks style
//Tick width & range thumb width need to be in sync, that's why I'm using the $unit variable.
$unit: 10px;
//Some basic setup first
* {
    box-sizing: border-box;
}

body {
    font-family: sans-serif;
    font-size: $unit * 2;
    line-height: $unit * 2;
    color: black;
    background: white;
}

//Some range styling.
//Using mixins because each major browser needs a separate selector to style parts of the range input, combining selectors would invalidate the whole selector on each browser
@mixin range-track {
    -webkit-appearance: none;
    width: 100%;
    height: $unit * 4;
    color: transparent;
    background: lightgray;
    border-radius: 999px;
    border: none;
}

@mixin range-thumb {
    -webkit-appearance: none;
    height: $unit * 4;
    width: $unit * 4;
    border-radius: 30px;
    background: red;
    box-shadow: 0px 2px 10px -2px black(1);
}

input[type=range] {
    -webkit-appearance: none;
    display: block;
    margin: 0;
    width: 100%;
    background: transparent;
}

input[type=range]::-webkit-slider-runnable-track {
    @include range-track();
}

input[type=range]::-moz-range-track {
    @include range-track();
}

input[type=range]::-ms-track {
    @include range-track();
}

input[type=range]::-ms-fill-lower {
    display: none;
}

input[type=range]::-ms-fill-upper {
    display: none;
}

input[type=range]::-webkit-slider-thumb {
    @include range-thumb();
}

input[type=range]::-moz-range-thumb {
    @include range-thumb();
}

input[type=range]::-ms-thumb {
    @include range-thumb();
}

//And now the ticks
.ticks {
    display: flex;
    justify-content: space-between;
    //We need left & right padding that's half the width of the range thumb, so all ticks align with the center of the thumb
    padding: $unit $unit*2;
}

.tick {
    position: relative;
    display: flex;
    justify-content: center;
    width: 1px;
    background: gray;
    //Cap the height of the tick & push text down, so the tick renders as a little line and the text doesn't overlap the line. Also add margin, so the container expands enough that the next element you'll add won't overlap the ticks.
    height: $unit;
    line-height: $unit * 5;
    margin-bottom: $unit*2;
}